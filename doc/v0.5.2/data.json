{
    "project": {},
    "files": {
        "src/lib/base-factory.coffee": {
            "name": "src/lib/base-factory.coffee",
            "modules": {},
            "classes": {
                "BaseFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/base-model.coffee": {
            "name": "src/lib/base-model.coffee",
            "modules": {},
            "classes": {
                "BaseModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/base-repository.coffee": {
            "name": "src/lib/base-repository.coffee",
            "modules": {},
            "classes": {
                "BaseRepository": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/base.coffee": {
            "name": "src/lib/base.coffee",
            "modules": {},
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/domain-error.coffee": {
            "name": "src/lib/domain-error.coffee",
            "modules": {
                "base-domain\n\n# class DomainError extends Error  # not worked.\n# see http://stackoverflow.com/questions/19422145/property-in-subclass-of-error-not-set": 1
            },
            "classes": {
                "DomainError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/entity.coffee": {
            "name": "src/lib/entity.coffee",
            "modules": {
                "base-domain": 1
            },
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/facade.coffee": {
            "name": "src/lib/facade.coffee",
            "modules": {},
            "classes": {
                "Facade": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/fixture.coffee": {
            "name": "src/lib/fixture.coffee",
            "modules": {},
            "classes": {
                "Fixture": 1,
                "FixtureModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/resource-client-interface.coffee": {
            "name": "src/lib/resource-client-interface.coffee",
            "modules": {},
            "classes": {
                "ResourceClientInterface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/types.coffee": {
            "name": "src/lib/types.coffee",
            "modules": {},
            "classes": {
                "TYPES": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "base-domain": {
            "name": "base-domain",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "Entity": 1,
                "BaseFactory": 1,
                "BaseModel": 1,
                "BaseRepository": 1,
                "Base": 1,
                "Facade": 1,
                "Fixture": 1,
                "FixtureModel": 1,
                "ResourceClientInterface": 1,
                "TYPES": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/lib/types.coffee",
            "line": 3,
            "description": "Base model class with \"id\" column"
        },
        "base-domain\n\n# class DomainError extends Error  # not worked.\n# see http://stackoverflow.com/questions/19422145/property-in-subclass-of-error-not-set": {
            "name": "base-domain\n\n# class DomainError extends Error  # not worked.\n# see http://stackoverflow.com/questions/19422145/property-in-subclass-of-error-not-set",
            "submodules": {},
            "classes": {
                "DomainError": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/lib/domain-error.coffee",
            "line": 4,
            "description": "error thrown by base-domain module"
        }
    },
    "classes": {
        "BaseFactory": {
            "name": "BaseFactory",
            "shortname": "BaseFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "file": "src/lib/base-factory.coffee",
            "line": 7,
            "description": "Base factory class of DDD pattern.\n\ncreate instance of model\n\nthe parent \"Base\" class just simply gives a @getFacade() method.",
            "extends": "Base"
        },
        "BaseModel": {
            "name": "BaseModel",
            "shortname": "BaseModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/base-model.coffee",
            "line": 9,
            "description": "Base model class of DDD pattern.\n\nthe parent \"Base\" class just simply gives a @getFacade() method.",
            "extends": "Base"
        },
        "BaseRepository": {
            "name": "BaseRepository",
            "shortname": "BaseRepository",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/base-repository.coffee",
            "line": 7,
            "description": "Base repository class of DDD pattern.\nResponsible for perpetuation of models.\nBaseRepository has a client, which access to data resource (RDB, NoSQL, memory, etc...)\n\nthe parent \"Base\" class just simply gives a @getFacade() method.",
            "extends": "Base"
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/base.coffee",
            "line": 3,
            "description": "parent class of model, factory and repository.\n\ngives them @getFacade() method."
        },
        "DomainError": {
            "name": "DomainError",
            "shortname": "DomainError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain\n\n# class DomainError extends Error  # not worked.\n# see http://stackoverflow.com/questions/19422145/property-in-subclass-of-error-not-set",
            "namespace": "",
            "file": "src/lib/domain-error.coffee",
            "line": 4,
            "description": "error thrown by base-domain module",
            "extends": "Error"
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/entity.coffee",
            "line": 5,
            "description": "Base model class with \"id\" column",
            "extends": "BaseModel"
        },
        "Facade": {
            "name": "Facade",
            "shortname": "Facade",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/facade.coffee",
            "line": 4,
            "description": "Facade class of DDD pattern.\n\n- create instance of factories\n- create instance of repositories"
        },
        "Fixture": {
            "name": "Fixture",
            "shortname": "Fixture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/fixture.coffee",
            "line": 7
        },
        "FixtureModel": {
            "name": "FixtureModel",
            "shortname": "FixtureModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/fixture.coffee",
            "line": 170
        },
        "ResourceClientInterface": {
            "name": "ResourceClientInterface",
            "shortname": "ResourceClientInterface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/resource-client-interface.coffee",
            "line": 5,
            "description": "interface of client accessing to resource.\nUsed in BaseRepository\n\nLoopBackClient in loopback-promised package implements this interface.\n\nsee https://github.com/CureApp/loopback-promised"
        },
        "TYPES": {
            "name": "TYPES",
            "shortname": "TYPES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base-domain",
            "namespace": "",
            "file": "src/lib/types.coffee",
            "line": 3,
            "description": "define various data type, including model and array of models\n\nkey: typeName (String)\nvalue: type (String|Function)"
        }
    },
    "classitems": [
        {
            "file": "src/lib/base-factory.coffee",
            "line": 20,
            "description": "model name to handle",
            "itemtype": "property",
            "name": "modelName",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "String",
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 31,
            "description": "constructor",
            "is_constructor": 1,
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 40,
            "description": "get model class this factory handles",
            "itemtype": "method",
            "name": "getModelClass",
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 51,
            "description": "create empty model instance",
            "itemtype": "method",
            "name": "createEmptyModel",
            "return": {
                "description": "",
                "type": "BaseModel"
            },
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 61,
            "description": "create instance of model class by plain object\n\nfor each prop, values are set by Model#set(prop, value)",
            "itemtype": "method",
            "name": "createFromObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "baseModel",
                    "description": "fallback properties",
                    "type": "BaseModel"
                }
            ],
            "return": {
                "description": "model",
                "type": "BaseModel"
            },
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 125,
            "description": "modify plain object before @createFromObject(obj)",
            "itemtype": "method",
            "name": "beforeCreateFromObject",
            "access": "protected",
            "tagname": "",
            "abstract": "",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "obj",
                "type": "Object"
            },
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-factory.coffee",
            "line": 138,
            "description": "modify model after createFromObject(obj), createEmptyModel()",
            "itemtype": "method",
            "name": "afterCreateModel",
            "access": "protected",
            "tagname": "",
            "abstract": "",
            "params": [
                {
                    "name": "model",
                    "description": "",
                    "type": "BaseModel"
                }
            ],
            "return": {
                "description": "model",
                "type": "BaseModel"
            },
            "class": "BaseFactory",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 23,
            "description": "key-value pair representing typeName - type\n\nuse for definition of @properties for each extender",
            "itemtype": "property",
            "name": "TYPES",
            "access": "protected",
            "tagname": "",
            "final": 1,
            "static": 1,
            "type": "Object",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 36,
            "description": "key-value pair representing property's name - type of the model\n\n    firstName    : @TYPES.STRING\n    lastName     : @TYPES.STRING\n    age          : @TYPES.NUMBER\n    registeredAt : @TYPES.DATE\n    team         : @TYPES.MODEL 'team'\n    hobbies      : @TYPES.MODELS 'hobby'\n    info         : @TYPES.ANY\n\nsee types.coffee for full options.",
            "itemtype": "property",
            "name": "properties",
            "abstract": "",
            "static": 1,
            "type": "Object",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 66,
            "description": "get key-value pair representing property's name - type info of the model\nif prop name is given, returns the info",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 91,
            "description": "get prop name whose type is CREATED_AT\nnotice: only one prop should be enrolled to CREATED_AT",
            "itemtype": "method",
            "name": "getPropOfCreatedAt",
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "propName",
                "type": "String"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 113,
            "description": "get prop name whose type is UPDATED_AT\nnotice: only one prop should be enrolled to UPDATED_AT",
            "itemtype": "method",
            "name": "getPropOfUpdatedAt",
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "propName",
                "type": "String"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 134,
            "description": "get list of properties which contains relational model",
            "itemtype": "method",
            "name": "getModelProps",
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 155,
            "description": "set value to prop",
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 174,
            "description": "set model prop",
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 183,
            "description": "synchronize relation columns and relationId columns",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "force",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "itemtype": "method",
            "name": "updateRelationIds",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 205,
            "description": "set related model(s)",
            "itemtype": "method",
            "name": "setRelatedModel",
            "params": [
                {
                    "name": "prop",
                    "description": "property name of the related model",
                    "type": "String"
                },
                {
                    "name": "submodel",
                    "description": "",
                    "type": "Entity|Array<Entity>"
                }
            ],
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 241,
            "description": "alias for setRelatedModel",
            "itemtype": "method",
            "name": "setRelatedModels",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 250,
            "description": "unset related model(s)",
            "params": [
                {
                    "name": "prop",
                    "description": "property name of the related models",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "itemtype": "method",
            "name": "setRelatedModels",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 274,
            "description": "alias for unsetRelatedModel",
            "itemtype": "method",
            "name": "unsetRelatedModels",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 282,
            "description": "add related models",
            "params": [
                {
                    "name": "prop",
                    "description": "property name of the related models",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "itemtype": "method",
            "name": "addRelatedModels",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 310,
            "description": "inherit value of anotherModel",
            "itemtype": "method",
            "name": "inherit",
            "params": [
                {
                    "name": "anotherModel",
                    "description": "",
                    "type": "BaseModel"
                }
            ],
            "return": {
                "description": "this",
                "type": "BaseModel"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 325,
            "description": "create plain object without relational entities\ndescendants of Entity are removed, but not descendants of BaseModel\ndescendants of Entity in descendants of BaseModel are removed ( = recursive)",
            "itemtype": "method",
            "name": "toPlainObject",
            "return": {
                "description": "plainObject",
                "type": "Object"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 373,
            "description": "include all relational models if not set",
            "itemtype": "method",
            "name": "includeAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "recursive",
                            "description": "recursively include models or not. unstable.",
                            "type": "Boolean|Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "self",
                "type": "Promise(BaseModel)"
            },
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 458,
            "description": "assert given prop is model prop",
            "itemtype": "method",
            "name": "assertSubModelProp",
            "access": "private",
            "tagname": "",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-model.coffee",
            "line": 478,
            "description": "return if Model is subclass of Entity",
            "itemtype": "method",
            "name": "isSubClassOfEntity",
            "access": "private",
            "tagname": "",
            "class": "BaseModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 20,
            "description": "model name to handle",
            "itemtype": "property",
            "name": "modelName",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "String",
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 32,
            "description": "client accessing to data resource (RDB, NoSQL, memory, etc...)\n\nmock object is input by default.\nExtenders must set this property to achieve perpetuation",
            "itemtype": "property",
            "name": "client",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "type": "ResourceClientInterface",
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 46,
            "description": "constructor",
            "is_constructor": 1,
            "return": {
                "description": ""
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 59,
            "description": "get model class this factory handles",
            "itemtype": "method",
            "name": "getModelClass",
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 71,
            "description": "Update or insert a model instance",
            "itemtype": "method",
            "name": "save",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "entity",
                    "description": "",
                    "type": "Entity|Object"
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "entity (the same instance from input, if entity given,)",
                "type": "Promise(Entity)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 98,
            "description": "get object by ID.",
            "itemtype": "method",
            "name": "get",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "entity",
                "type": "Promise(Entity)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 114,
            "description": "alias for get()",
            "itemtype": "method",
            "name": "getById",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "entity",
                "type": "Promise(Entity)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 128,
            "description": "Find all model instances that match params",
            "itemtype": "method",
            "name": "query",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "query parameters",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "array of entities",
                "type": "Promise(Array(Entity))"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 143,
            "description": "Find one model instance that matches params, Same as query, but limited to one result",
            "itemtype": "method",
            "name": "singleQuery",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "query parameters",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "entity",
                "type": "Promise(Entity)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 159,
            "description": "Destroy the given entity (which must have \"id\" value)",
            "itemtype": "method",
            "name": "delete",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "entity",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "isDeleted",
                "type": "Promise(Boolean)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 174,
            "description": "Update set of attributes.",
            "itemtype": "method",
            "name": "update",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "id of the entity to update",
                    "type": "Any"
                },
                {
                    "name": "data",
                    "description": "key-value pair to update (notice: this must not be instance of Entity)",
                    "type": "Object"
                },
                {
                    "name": "client",
                    "description": "",
                    "type": "ResourceClientInterface",
                    "optional": true,
                    "optdefault": "@client"
                }
            ],
            "return": {
                "description": "updated entity",
                "type": "Promise(Entity)"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base-repository.coffee",
            "line": 199,
            "description": "add createdAt, updatedAt to given data\n- createdAt will not be overriden if already set.\n- updatedAt will be overriden for each time",
            "itemtype": "method",
            "name": "appendTimeStamp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "isCreate",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "BaseRepository",
            "module": "base-domain"
        },
        {
            "file": "src/lib/base.coffee",
            "line": 13,
            "description": "get facade\n\nthe implementation is in Facade#requre()",
            "itemtype": "method",
            "name": "getFacade",
            "return": {
                "description": "",
                "type": "Facade"
            },
            "class": "Base",
            "module": "base-domain"
        },
        {
            "file": "src/lib/domain-error.coffee",
            "line": 32,
            "description": "reason of the error\nalphanumeric string (without space) is recommended,",
            "itemtype": "property",
            "name": "reason",
            "type": "{String}",
            "reason": "",
            "class": "DomainError",
            "module": "base-domain\n\n# class DomainError extends Error  # not worked.\n# see http://stackoverflow.com/questions/19422145/property-in-subclass-of-error-not-set"
        },
        {
            "file": "src/lib/entity.coffee",
            "line": 16,
            "description": "primary key for the model",
            "itemtype": "property",
            "name": "id",
            "type": "any",
            "class": "Entity",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 16,
            "description": "create instance of Facade",
            "itemtype": "method",
            "name": "createInstance",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Facade"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 29,
            "description": "constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "dirname",
                            "description": "path where domain definition files are included",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\".\""
                        }
                    ]
                }
            ],
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 42,
            "description": "get a model class",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 53,
            "description": "get a factory class",
            "itemtype": "method",
            "name": "getFactory",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 64,
            "description": "get a repository class",
            "itemtype": "method",
            "name": "getRepository",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 75,
            "description": "create a factory instance",
            "itemtype": "method",
            "name": "createFactory",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DomainFactory"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 87,
            "description": "create a repository instance",
            "itemtype": "method",
            "name": "createRepository",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DomainRepository"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 99,
            "description": "read a file and returns class\nAttaches getFacade() method",
            "itemtype": "method",
            "name": "require",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Class"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 124,
            "description": "read a file and returns the instance of the file's class",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DomainFactory"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 138,
            "description": "create instance of DomainError",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "reason",
                    "description": "reason of the error",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DomainError"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 152,
            "description": "check if given object is instance of DomainError",
            "itemtype": "method",
            "name": "isDomainError",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/facade.coffee",
            "line": 165,
            "description": "insert fixture data\n(Node.js only)",
            "itemtype": "method",
            "name": "insertFixtures",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dataDir",
                            "description": "directory to have fixture data files",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'./data'"
                        },
                        {
                            "name": "tsvDir",
                            "description": "directory to have TSV files",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'./tsv'"
                        },
                        {
                            "name": "models",
                            "description": "model names to insert. default: all models",
                            "type": "Array(String)",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "return": {
                "description": "dataPool inserted data",
                "type": "Promise(Object)"
            },
            "class": "Facade",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 14,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "dirname",
                            "description": "director(y|ies) to have fixture files. /data, /tsvs should be included in the directory.",
                            "type": "String|Array",
                            "optional": true,
                            "optdefault": "'./fixtures'"
                        },
                        {
                            "name": "data",
                            "description": "default data, merged to dataPool",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "debug",
                            "description": "if true, shows debug log",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Fixture",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 58,
            "description": "add data to pool for model's data",
            "itemtype": "method",
            "name": "addToDataPool",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Fixture",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 69,
            "description": "inserts data in LoopBack",
            "params": [
                {
                    "name": "names",
                    "description": "list of fixture models to insert data",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "insert",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Fixture",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 111,
            "description": "adds dependent models, topological sort",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "names",
                    "description": "list of fixture models to insert data",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "resolveDependencies",
            "return": {
                "description": "model names",
                "type": "Array"
            },
            "class": "Fixture",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 176,
            "is_constructor": 1,
            "class": "FixtureModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 186,
            "description": "inserts data in LoopBack",
            "itemtype": "method",
            "name": "insert",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "FixtureModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/fixture.coffee",
            "line": 228,
            "description": "read TSV, returns model data",
            "itemtype": "method",
            "name": "readTSV",
            "class": "FixtureModel",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 19,
            "description": "Create new instance of Model class, saved in database",
            "itemtype": "method",
            "name": "create",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Object)"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 31,
            "description": "Update or insert a model instance\nThe update will override any specified attributes in the request data object. It won’t remove  existing ones unless the value is set to null.",
            "itemtype": "method",
            "name": "upsert",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Object)"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 44,
            "description": "Find object by ID.",
            "itemtype": "method",
            "name": "findById",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Object)"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 57,
            "description": "Find all model instances that match filter specification.",
            "itemtype": "method",
            "name": "find",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Array(Object))"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 68,
            "description": "Find one model instance that matches filter specification. Same as find, but limited to one result",
            "itemtype": "method",
            "name": "findOne",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Object)"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 80,
            "description": "Destroy model instance",
            "itemtype": "method",
            "name": "destroyById",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 92,
            "description": "Destroy model instance with the specified ID.",
            "itemtype": "method",
            "name": "destroyById",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 104,
            "description": "Update set of attributes.",
            "itemtype": "method",
            "name": "updateAttributes",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise(Object)"
            },
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/resource-client-interface.coffee",
            "line": 117,
            "description": "return Promise object as mock",
            "itemtype": "method",
            "name": "mock",
            "access": "private",
            "tagname": "",
            "class": "ResourceClientInterface",
            "module": "base-domain"
        },
        {
            "file": "src/lib/types.coffee",
            "line": 30,
            "description": "get type of single model name by model name\n\n     model     =>   type\n    \"notebook\" => \"m<notebook>\"",
            "itemtype": "method",
            "name": "MODEL",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "idPropName",
                    "description": "by default: xxxYyyId when modelName is xxx-yyy",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "type",
                "type": "String"
            },
            "class": "TYPES",
            "module": "base-domain"
        },
        {
            "file": "src/lib/types.coffee",
            "line": 48,
            "description": "get type of model name (array) by model name\n\n     model     =>   type\n    \"notebook\" => \"a<notebook>\"",
            "itemtype": "method",
            "name": "MODELS",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "modelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "idPropName",
                    "description": "by default: xxxYyyIds when modelName is xxx-yyy",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "type",
                "type": "String"
            },
            "class": "TYPES",
            "module": "base-domain"
        },
        {
            "file": "src/lib/types.coffee",
            "line": 67,
            "description": "get information object by type",
            "itemtype": "method",
            "name": "info",
            "access": "public",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[info.model] if model-related type, the name of the model",
                "type": "String|null"
            },
            "class": "TYPES",
            "module": "base-domain"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: abstract",
            "line": " src/lib/base-factory.coffee:125"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/lib/base-factory.coffee:138"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/lib/base-model.coffee:36"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/lib/base-repository.coffee:32"
        },
        {
            "message": "unknown tag: reason",
            "line": " src/lib/domain-error.coffee:32"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/lib/base-factory.coffee:31"
        },
        {
            "message": "Missing item type\nset value to prop",
            "line": " src/lib/base-model.coffee:155"
        },
        {
            "message": "Missing item type\nset model prop",
            "line": " src/lib/base-model.coffee:174"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/lib/base-repository.coffee:46"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/lib/facade.coffee:29"
        },
        {
            "message": "Missing item type",
            "line": " src/lib/fixture.coffee:14"
        },
        {
            "message": "Missing item type",
            "line": " src/lib/fixture.coffee:176"
        }
    ]
}